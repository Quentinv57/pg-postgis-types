{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import wkx from 'wkx';\nimport array from 'postgres-array';\nimport types from 'pg-custom-types';\n\nconst TYPENAMES = [ 'geometry',\n                    'geometry_dump',\n                    'geography',\n                    'box2d',\n                    'box3d',\n                    '_geometry',\n                    '_geometry_dump',\n                    '_geography',\n                    '_box2d',\n                    '_box3d' ];\n\nlet GEOMETRY_OID = null;\nlet GEOGRAPHY_OID = null;\n\nlet parseGeometryHandler = function (value) {\n  return wkx.Geometry.parse(new Buffer(value, 'hex'));\n};\n\nfunction parseGeometry(value) {\n  return parseGeometryHandler(value);\n}\n\nfunction parseBox(value) {\n  value = value.substring(value.indexOf('(') + 1, value.indexOf(')'));\n\n  const pairs = value.split(',');\n  const coordinates = [];\n\n  for (let pair of pairs) {\n    coordinates.push(pair.split(' ').map(i => +i));\n  }\n\n  return coordinates;\n}\n\nfunction parsePostgisArray(parser) {\n  return types.allowNull((value) => {\n    return array.parse(value.replace(/:/g, ','), types.allowNull(parser));\n  });\n}\n\nconst parsers = {\n  geometry: types.allowNull(parseGeometry),\n  geography: types.allowNull(parseGeometry),\n  box2d: types.allowNull(parseBox),\n  box3d: types.allowNull(parseBox),\n  _geometry: parsePostgisArray(parseGeometry),\n  _geography: parsePostgisArray(parseGeometry),\n  _box2d: parsePostgisArray(parseBox),\n  _box3d: parsePostgisArray(parseBox)\n};\n\nfunction postgis(postgres, connection, callback) {\n  if (types.oids.geometry != null) {\n    return callback();\n  }\n\n  types(postgres, connection, TYPENAMES, (err, res) => {\n    if (err) {\n      return callback(err);\n    }\n\n    for (let parser of Object.keys(parsers)) {\n      if (res[parser]) {\n        postgres.types.setTypeParser(+res[parser], parsers[parser]);\n      }\n    }\n\n    GEOMETRY_OID = res.geometry;\n    GEOGRAPHY_OID = res.geography;\n\n    callback();\n  });\n}\n\npostgis.isGeometryType = function (oid) {\n  return oid === GEOMETRY_OID || oid === GEOGRAPHY_OID;\n};\n\npostgis.setGeometryParser = function (parser) {\n  parseGeometryHandler = parser;\n};\n\nexport default postgis;\n"]}